{"version":3,"sources":["images/logo.png","components/header/header.js","store/data/constant.js","store/data/index.js","components/header/index.js","container/appHome/AppHome.js","container/appHome/index.js","routes.js","store/data/api.js","store/data/saga.js","store/rootSaga.js","store/rootReducer.js","store/main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","getNames","this","props","react_default","a","createElement","Navbar","bg","variant","Brand","href","alt","src","logo","width","height","className","Component","GET_NAMES","GET_NAMES_SUCCESS","GET_NAMES_ERROR","initialState","phase","names","mapDispatchToProps","payload","type","connect","state","AppHome","components_header","Routes","react_router_dom","Fragment","react_router","exact","path","component","getNamesAPI","axios","get","then","response","data","NamesSaga","getNameSaga","action","regenerator_default","wrap","_context","prev","next","call","sent","put","t0","console","log","stop","_marked","_context2","takeLatest","_marked2","_callee","all","rootSaga_marked","rootReducer","combineReducers","DataStore","arguments","length","undefined","Object","objectSpread","middleWare","sagaMiddleware","createSagaMiddleware","push","store","createStore","reducers","compose","applyMiddleware","apply","run","sagas","App","es","routes","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f3a8f7d4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.3fa434f6.png\";","import React, { Component } from 'react';\r\nimport logo from '../../images/logo.png';\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nclass Header extends Component {\r\n\r\n    componentDidMount() {\r\n        const { getNames } = this.props;\r\n        getNames();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <Navbar bg=\"dark\" variant=\"dark\">\r\n                <Navbar.Brand href=\"#home\">\r\n                    <img\r\n                        alt=\"\"\r\n                        src={logo}\r\n                        width=\"84\"\r\n                        height=\"60\"\r\n                        className=\"d-inline-block align-top\"\r\n                    />{' '}\r\n                    React and Redux \r\n    </Navbar.Brand>\r\n            </Navbar>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","export const GET_NAMES = 'GET_NAMES';\r\nexport const GET_NAMES_SUCCESS = 'GET_NAMES_SUCCESS';\r\nexport const GET_NAMES_ERROR = 'GET_NAMES_ERROR';\r\n","import {\r\n    GET_NAMES, GET_NAMES_SUCCESS, GET_NAMES_ERROR\r\n} from './constant';\r\n\r\nconst initialState = {\r\n    phase : 'Loading',\r\n    names : null\r\n}\r\n\r\nexport function DataStore(state = initialState, action) {\r\n    switch(action.type) {\r\n        case GET_NAMES:\r\n        return {\r\n            ...state,\r\n            phase: 'loading'\r\n        }\r\n\r\n        case GET_NAMES_SUCCESS:\r\n        return {\r\n            ...state,\r\n            phase: 'success',\r\n            names: action.data\r\n        }\r\n\r\n        case GET_NAMES_ERROR:\r\n        return {\r\n            ...state,\r\n            phase: 'error'\r\n        }\r\n\r\n        default:\r\n        return state;\r\n    }\r\n}\r\n\r\n// Action creator -- getModelString\r\nexport const getNames = payload => ({\r\n    type: GET_NAMES,\r\n    payload\r\n});","import Header from './header';\r\nimport { connect } from 'react-redux';\r\nimport { getNames } from '../../store/data'\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    getNames: payload => getNames(payload)\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\r\n","import React, {Component} from 'react';\r\nimport Header from '../../components/header'\r\n\r\nclass AppHome extends Component {\r\n    render() {\r\n        return(\r\n            <div>\r\n                <Header />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AppHome;","import AppHome from './AppHome';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AppHome);\r\n","import React from 'react';\r\nimport { Route, BrowserRouter as Router } from 'react-router-dom';\r\nimport AppHome from './container/appHome'\r\n\r\nconst Routes = () => (\r\n    <Router>\r\n        <>\r\n            <Route exact path=\"/\" component={AppHome} />\r\n        </>\r\n    </Router>\r\n)\r\n\r\nexport default Routes;","import axios from \"axios\";\r\n\r\n\r\n// const axiosInstance = axios.create({\r\n//     baseURL: \"http://www.mocky.io/v2/5e80db613000002c006f95c9\",\r\n//     headers: {\r\n//       \"Access-Control-Allow-Origin\": \"*\",\r\n//       \"Content-Type\": \"application/json\",\r\n//       \"Ocp-Apim-Subscription-Key\": \"4102aa5eb63c4485ad92d36003c5dc68\",\r\n//       Pragma: \"no-cache\"\r\n//     },\r\n//     timeout: 240000\r\n//   });\r\n\r\n\r\n//   export const getNamesAPI = () =>\r\n//   axiosInstance\r\n//     .post()\r\n//     .then(response => response.data);\r\n\r\nexport const getNamesAPI = () =>\r\n    axios.get('http://www.mocky.io/v2/5e80db613000002c006f95c9')\r\n  .then((response) => { return response.data;\r\n    console.log( \"reponse data \", response.data);\r\n    console.log(response.status);\r\n    console.log(response.statusText);\r\n    console.log(response.headers);\r\n    console.log(response.config);\r\n  });","import {\r\n    GET_NAMES, GET_NAMES_SUCCESS, GET_NAMES_ERROR\r\n} from './constant';\r\n\r\nimport { getNamesAPI } from './api';\r\nimport { takeLatest, put, call } from 'redux-saga/effects';\r\n\r\nfunction* NamesSaga(action) {\r\n    try {\r\n        const data = yield call(getNamesAPI, action.payload )\r\n        yield put( { type: GET_NAMES_SUCCESS, data })\r\n    }\r\n    catch (error){\r\n        console.log(\"error\", error);\r\n    }\r\n}\r\n\r\n\r\nexport function* getNameSaga(){\r\n    yield takeLatest( GET_NAMES, NamesSaga);\r\n}","import { all } from 'redux-saga/effects';\r\nimport { getNameSaga } from './data/saga';\r\n\r\n\r\nexport default function* (){\r\n    yield all([\r\n        getNameSaga(),\r\n    ])\r\n}","import { combineReducers } from 'redux';\r\nimport { DataStore } from './data';\r\n\r\nconst rootReducer = combineReducers({\r\n    DataStore: DataStore\r\n})\r\n\r\nexport default rootReducer;","// ...\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport sagas from './rootSaga';\r\nimport reducers from './rootReducer';\r\n\r\nconst middleWare = [];\r\nconst sagaMiddleware = createSagaMiddleware();\r\nmiddleWare.push(sagaMiddleware)\r\nconst store = createStore(\r\n  reducers,\r\n  compose( applyMiddleware(...middleWare))\r\n);\r\nsagaMiddleware.run(sagas);\r\nexport {\r\n  store\r\n};","import React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport './App.css';\nimport Routes from './routes';\nimport { store } from './store/main'\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store = {store}>\n          <Routes />\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from \"react-router-dom\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}